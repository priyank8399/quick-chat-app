[{"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\index.js":"1","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\App.js":"2","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Login\\Login.js":"3","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Chat\\Chat.js":"4","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\InfoBar\\InfoBar.js":"5","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Input\\Input.js":"6","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Messages\\Messages.js":"7","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Message\\Message.js":"8"},{"size":151,"mtime":1611382784963,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1611456437592,"results":"11","hashOfConfig":"10"},{"size":992,"mtime":1611533011827,"results":"12","hashOfConfig":"10"},{"size":2161,"mtime":1611559045655,"results":"13","hashOfConfig":"10"},{"size":565,"mtime":1611536852094,"results":"14","hashOfConfig":"10"},{"size":550,"mtime":1611553729071,"results":"15","hashOfConfig":"10"},{"size":398,"mtime":1611559547707,"results":"16","hashOfConfig":"10"},{"size":1089,"mtime":1611560498226,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1yx85j7",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\index.js",[],["37","38"],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\App.js",[],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Login\\Login.js",[],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Chat\\Chat.js",["39"],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\InfoBar\\InfoBar.js",["40","41"],"import React from 'react';\r\n\r\nimport './InfoBar.css';\r\nimport onlineIcon from '../Icons/onlineIcon.png';\r\nimport closeIcon from '../Icons/closeIcon.png';\r\nconst InfoBar = ({room}) => (\r\n    <div className=\"infoBar\">\r\n        <div className=\"leftInnerContainer\">\r\n            <img className=\"onlineIcon\" src={onlineIcon} alt=\"online image\" />\r\n            <h3>{room}</h3>\r\n        </div>\r\n\r\n        <div className=\"rightInnerContainer\">\r\n            <a href=\"/\"><img src={closeIcon} alt=\"close image\" /></a>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default InfoBar;","C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Input\\Input.js",[],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Messages\\Messages.js",[],"C:\\Users\\priya\\Desktop\\quick-chat-app\\client\\src\\components\\Message\\Message.js",["42","43"],"import React from 'react';\r\n\r\nimport './Message.css';\r\n\r\nimport ReactEmoji from 'react-emoji';\r\n\r\nconst Message = ({ message: { text, user }, name }) => {\r\n  let isSentByCurrentUser = false;\r\n\r\n  //Temporary assign empty string if name is null\r\n  const trimmedName = (name == undefined) ? '' : name.trim().toLowerCase();\r\n\r\n  if(user === trimmedName) {\r\n    isSentByCurrentUser = true;\r\n  }\r\n\r\n  return (\r\n    isSentByCurrentUser\r\n      ? (\r\n        <div className=\"messageContainer justifyEnd\">\r\n          <p className=\"sentText pr-10\">{trimmedName}</p>\r\n          <div className=\"messageBox backgroundBlue\">\r\n            <p className=\"messageText colorWhite\">{ReactEmoji.emojify(text)}</p>\r\n          </div>\r\n        </div>\r\n        )\r\n        : (\r\n          <div className=\"messageContainer justifyStart\">\r\n            <div className=\"messageBox backgroundLight\">\r\n              <p className=\"messageText colorDark\">{ReactEmoji.emojify(text)}</p>\r\n            </div>\r\n            <p className=\"sentText pl-10 \">{user}</p>\r\n          </div>\r\n        )\r\n  );\r\n}\r\n\r\nexport default Message;",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":8,"nodeType":"50","messageId":"51","endLine":9,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":9,"column":13,"nodeType":"54","endLine":9,"endColumn":79},{"ruleId":"52","severity":1,"message":"53","line":14,"column":25,"nodeType":"54","endLine":14,"endColumn":66},{"ruleId":"48","severity":1,"message":"55","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":18},{"ruleId":"56","severity":1,"message":"57","line":11,"column":29,"nodeType":"58","messageId":"59","endLine":11,"endColumn":31},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'ReactEmoji' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]