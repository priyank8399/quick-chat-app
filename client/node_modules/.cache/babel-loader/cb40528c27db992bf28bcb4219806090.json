{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\priya\\\\Desktop\\\\quick-chat-app\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [messages, setMessages] = useState([]); // Messages array\n\n  const [message, setMessage] = useState(''); // Each individual message\n\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT); //Modify this to change target server\n\n    console.log('test');\n    setName(name);\n    setRoom(room);\n    socket.emit('login', {\n      name,\n      room\n    }, () => {//error\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]); //sending message (sendMessage())\n\n  const sendMessage = event => {\n    event.preventDefault(); // Prevent a full refresh\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"innerContainer\",\n      children: /*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"V/9NTAimDcYMyc3/tAj11m/igv4=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/priya/Desktop/quick-chat-app/client/src/components/Chat/Chat.js"],"names":["React","useEffect","useState","queryString","io","InfoBar","socket","Chat","location","name","setName","room","setRoom","messages","setMessages","message","setMessage","ENDPOINT","parse","search","console","log","emit","off","on","sendMessage","event","preventDefault"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC,CAH2B,CAGmB;;AAC9C,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC,CAJ2B,CAIiB;;AAC5C,QAAMe,QAAQ,GAAG,gBAAjB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACQ,MAAAA,IAAD;AAAOE,MAAAA;AAAP,QAAeR,WAAW,CAACe,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAArB;AACAb,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,CAAX,CAFY,CAEW;;AACvBG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAX,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACgB,IAAP,CAAY,OAAZ,EAAqB;AAAEb,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAArB,EAAqC,MAAM,CACvC;AACH,KAFD;AAIA,WAAO,MAAM;AACTL,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AACAhB,MAAAA,MAAM,CAACiB,GAAP;AACH,KAHD;AAIH,GAfQ,EAeN,CAACN,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAfM,CAAT;AAkBAlB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAa;AAC9BD,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcE,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACF,QAAD,CAJM,CAAT,CAzB2B,CA+B3B;;AACA,QAAMY,WAAW,GAAGC,KAAK,IAAI;AACzBA,IAAAA,KAAK,CAACC,cAAN,GADyB,CACD;;AACxB,QAAGZ,OAAH,EAAY;AACRT,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACJ,GALD;;AAOAI,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAAqBF,QAArB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEF;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CApDD;;GAAMJ,I;;KAAAA,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport './Chat.css';\r\nimport InfoBar from '../InfoBar/InfoBar';\r\nlet socket;\r\n\r\nconst Chat = ({ location }) => {\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [messages, setMessages] = useState([]); // Messages array\r\n    const [message, setMessage] = useState(''); // Each individual message\r\n    const ENDPOINT = 'localhost:5000';\r\n    \r\n    useEffect(() => {\r\n        const {name, room} = queryString.parse(location.search);\r\n        socket = io(ENDPOINT); //Modify this to change target server\r\n        console.log('test');\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('login', { name, room }, () => {\r\n            //error\r\n        });\r\n\r\n        return () => {\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n    }, [ENDPOINT, location.search]);\r\n\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (message) => {\r\n            setMessages([...messages, message]);\r\n        })\r\n    }, [messages]);\r\n\r\n    //sending message (sendMessage())\r\n    const sendMessage = event => {\r\n        event.preventDefault(); // Prevent a full refresh\r\n        if(message) {\r\n            socket.emit('sendMessage', message, () => setMessage(''));\r\n        }\r\n    }\r\n\r\n    console.log(message, messages);\r\n\r\n    return (\r\n        <div className=\"outerContainer\">\r\n            <div className=\"innerContainer\">\r\n                <InfoBar room={room} />\r\n                {/*<input value = {message}\r\n                onChange = {(event) => setMessage(event.target.value)}\r\n                onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\r\n                />*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}